Index: SearchServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\r\nimport java.io.*;\r\nimport java.lang.reflect.Array;\r\nimport java.net.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\n/**\r\n * A GUI Server for Marketplace\r\n *\r\n * <p>Purdue University -- CS18000 -- Fall 2022 -- Homework 11 -- Challenge</p>\r\n *\r\n * @author Stanley Kim\r\n * @version November 19, 2022\r\n */\r\n\r\n\r\n\r\n\r\npublic class SearchServer {\r\n\r\n\r\n    public static void main(String[] args) {\r\n        boolean createNewAccount = false;\r\n        BufferedReader br;\r\n        PrintWriter writer;\r\n\r\n        try {\r\n            ServerSocket serverSocket = new ServerSocket(1234);\r\n            System.out.println(\"Waiting for the client to connect...\");\r\n            Socket socket = serverSocket.accept();\r\n            System.out.println(\"Client connected!\");\r\n            br = new BufferedReader(\r\n                    new InputStreamReader(socket.getInputStream()));\r\n            writer = new\r\n                    PrintWriter(socket.getOutputStream());\r\n            String line;\r\n\r\n            // Receives the Login Credentials, and returns the information\r\n            while (true) {\r\n                line = br.readLine();\r\n                if (line.contains(\"Break out of the loop\")) {\r\n                    break;\r\n                }\r\n                if (line.contains(\"Creating a new account\")) {\r\n                    createNewAccount = true;\r\n                    break;\r\n                }\r\n                String[] lines = line.split(\";\");\r\n                line = verifyLogin(lines[0], lines[1]);\r\n                if (line == null) {\r\n                    writer.println(\"Incorrect Username or Password, try again\");\r\n                    writer.flush();\r\n                } else {\r\n                    String[] info = line.split(\";\");\r\n                    JOptionPane.showMessageDialog(null, \"Welcome \" + info[2],\r\n                            \"Welcome!\", JOptionPane.INFORMATION_MESSAGE);\r\n                    User user = getUser(line);\r\n                    writer.println(user.toString());\r\n                    writer.flush();\r\n                }\r\n\r\n            }\r\n            if (createNewAccount) {\r\n                line = br.readLine();\r\n                String[] info = line.split(\";\");\r\n                User user = createAccount(info[0], info[1], info[2], info[3]);\r\n                if (user == null) {\r\n                    line = \"ERROR\";\r\n                }\r\n                writer.println(line);\r\n                writer.flush();\r\n\r\n            }\r\n\r\n\r\n\r\n            // Options for Customer or Seller\r\n\r\n            String option = br.readLine();\r\n\r\n            if (option.equals(\"Customer\")) {\r\n                // Customer Options\r\n                while (true) {\r\n                    option = br.readLine();\r\n\r\n                    if (option.equals(\"1\")) {\r\n                        String toReturn = viewMarket();\r\n                        writer.println(toReturn);\r\n                        writer.flush();\r\n                    } else if (option.equals(\"2\")) {\r\n                        //TODO Search for Products\r\n                    } else if (option.equals(\"3\")) {\r\n                        String toReturn = sortPrice();\r\n                        writer.println(toReturn);\r\n                        writer.flush();\r\n                    } else if (option.equals(\"4\")) {\r\n                        String toReturn = sortQuantity();\r\n                        writer.println(toReturn);\r\n                        writer.flush();\r\n                    } else if (option.equals(\"5\")) {\r\n                        //TODO View Dashboard\r\n                    } else if (option.equals(\"6\")) {\r\n                        //TODO Export File with Purchase History\r\n                    } else if (option.equals(\"7\")) {\r\n                        //TODO Add Items to the Shopping Cart\r\n                    } else if (option.equals(\"8\")) {\r\n                        //TODO Remove Items to the Shopping Cart\r\n                    } else if (option.equals(\"9\")) {\r\n                        //TODO Purchase All Items in the Shopping Cart\r\n                    } else if (option.equals(\"10\")) {\r\n                        //TODO View Shopping Cart\r\n                    } else if (option.equals(\"11\")) {\r\n                        //TODO More Information\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n\r\n            } else {\r\n                // Seller Options\r\n                option = br.readLine();\r\n                if (option.equals(\"1\")) {\r\n\r\n                } else if (option.equals(\"2\")) {\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    // Customer Option 1 and Seller Option 1\r\n    private static String viewMarket() {\r\n        String line;\r\n        String printer = \"\";\r\n        ArrayList<Product> products = new ArrayList<>();\r\n\r\n        ArrayList<String> storeNames = new ArrayList<>();\r\n        try {\r\n            File markets = new File(\"Markets.txt\");\r\n            BufferedReader bfr = new BufferedReader(new FileReader(markets));\r\n            while ((line = bfr.readLine()) != null) { //Takes name of all markets in file\r\n                storeNames.add(line); //adds to arraylist\r\n            }\r\n\r\n            bfr.close();\r\n            for (String storeName : storeNames) {\r\n                File f = new File(storeName + \" Market.txt\");\r\n                BufferedReader productReader = new BufferedReader(new FileReader(f));\r\n                line = productReader.readLine();\r\n                while (line != null) { //iterates through lines of files and adds them to string\r\n                    if (!line.contains(\"-----\")) {\r\n                        products.add(getProduct(line));\r\n                        line = productReader.readLine();\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n            }\r\n        } catch (IOException e) {\r\n            System.out.println(\"There are no stores/products found. Sorry\");\r\n        }\r\n        for (int i = 0; i < products.size(); i++) {\r\n            printer = printer + products.get(i).toString() + \";\";\r\n        }\r\n        System.out.println(printer);\r\n        return printer;\r\n    }\r\n\r\n\r\n    // Customer Option 3\r\n    private static String sortPrice() {\r\n        String line;\r\n        ArrayList<Product> products = new ArrayList<>();\r\n        ArrayList<String> storeNames = new ArrayList<>();\r\n        try {\r\n            File markets = new File(\"Markets.txt\");\r\n            BufferedReader bfr = new BufferedReader(new FileReader(markets));\r\n            while ((line = bfr.readLine()) != null) { //Takes name of all markets in file\r\n                storeNames.add(line); //adds to arraylist\r\n            }\r\n\r\n            bfr.close();\r\n            for (String storeName : storeNames) {\r\n                File f = new File(storeName + \" Market.txt\");\r\n                BufferedReader productReader = new BufferedReader(new FileReader(f));\r\n                line = productReader.readLine();\r\n                while (line != null) { //iterates through lines of files and adds them to string\r\n                    if (!line.contains(\"------\")) {\r\n                        products.add(getProduct(line));\r\n                        line = productReader.readLine();\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            System.out.println(\"There are no stores/products found. Sorry\");\r\n\r\n        }\r\n\r\n        Product[] temp = new Product[products.size()];\r\n        for (int i = 0; i < temp.length; i++) {\r\n            temp[i] = products.get(i);\r\n        }\r\n\r\n        for (int i = 0; i < temp.length; i++) {\r\n            for (int j = temp.length - 1; j > i; j--) {\r\n                if (temp[i].getPrice() > temp[j].getPrice()) {\r\n\r\n                    double tempI = temp[i].getPrice();\r\n                    double tempJ = temp[j].getPrice();\r\n                    if (tempI > tempJ) {\r\n                        Product yolo = temp[i];\r\n                        temp[i] = temp[j];\r\n                        temp[j] = yolo;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        String toReturn = \"\";\r\n        for (Product product : temp) {\r\n            toReturn = toReturn + product.toString() + \";\";\r\n\r\n        }\r\n        System.out.println(toReturn);\r\n        return toReturn;\r\n    }\r\n\r\n\r\n    // Customer Option 4\r\n\r\n    private static String sortQuantity() {\r\n        String line;\r\n        ArrayList<Product> products = new ArrayList<>();\r\n        ArrayList<String> storeNames = new ArrayList<>();\r\n        try {\r\n            File markets = new File(\"Markets.txt\");\r\n            BufferedReader bfr = new BufferedReader(new FileReader(markets));\r\n            while ((line = bfr.readLine()) != null) { //Takes name of all markets in file\r\n                storeNames.add(line); //adds to arraylist\r\n            }\r\n\r\n            bfr.close();\r\n            for (String storeName : storeNames) {\r\n                File f = new File(storeName + \" Market.txt\");\r\n                BufferedReader productReader = new BufferedReader(new FileReader(f));\r\n                line = productReader.readLine();\r\n                while (line != null) { //iterates through lines of files and adds them to string\r\n                    if (!line.contains(\"----\")) {\r\n                        products.add(getProduct(line));\r\n                        line = productReader.readLine();\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            System.out.println(\"There are no stores/products found. Sorry\");\r\n        }\r\n\r\n        Product[] temp = new Product[products.size()];\r\n        for (int i = 0; i < temp.length; i++) {\r\n            temp[i] = products.get(i);\r\n        }\r\n        for (int i = 0; i < temp.length; i++) {\r\n            for (int j = temp.length - 1; j > i; j--) {\r\n                if (temp[i].getQuantity() > temp[j].getQuantity()) {\r\n\r\n                    int tempI = temp[i].getQuantity();\r\n                    int tempJ = temp[j].getQuantity();\r\n                    if (tempI > tempJ) {\r\n                        Product yolo = temp[i];\r\n                        temp[i] = temp[j];\r\n                        temp[j] = yolo;\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n        String toReturn = \"\";\r\n        for (Product product : temp) {\r\n            toReturn = toReturn + product.toString() + \";\";\r\n\r\n        }\r\n        System.out.println(toReturn);\r\n        return toReturn;\r\n    }\r\n\r\n\r\n    // Checks the login information, and checks if the info matches the login\r\n    public static String verifyLogin(String username, String password) throws IOException {\r\n        ArrayList<String> lines = getTextInfo(new File(\"login.txt\"));\r\n        for (String line : lines) {\r\n            String[] contents = line.split(\";\");\r\n            if (contents[0].equals(username) && contents[1].equals(password)) {\r\n                return line;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Creates a new account based on the information given on the create account page\r\n    public static User createAccount(String username, String password, String name, String option) {\r\n        try {\r\n\r\n            PrintWriter pw = new PrintWriter(new FileOutputStream(\"login.txt\", true));\r\n            pw.println(\"\");\r\n            pw.println(username + \";\" + password + \";\" + name);\r\n            pw.close();\r\n\r\n            File f = new File(username + \"'s File.txt\");\r\n            pw = new PrintWriter(new FileOutputStream(f, true));\r\n            pw.println((\"Name: \" + name));\r\n            pw.println(\"User: \" + option);\r\n            pw.close();\r\n\r\n            // Sellers have access to all Customer information\r\n            if (option.equals(\"Customer\")) {\r\n                f = new File(\"Customers.txt\");\r\n                pw = new PrintWriter(new FileOutputStream(f, true));\r\n                if (f.createNewFile()) {\r\n                    ArrayList<String> lines = getTextInfo(f);\r\n                    for (String x : lines) {\r\n                        pw.println(x);\r\n                    }\r\n                }\r\n\r\n                pw.println(name);\r\n                pw.close();\r\n                return new Customer(name, username, password);\r\n\r\n            } else {\r\n                return new Seller(name, username, password);\r\n            }\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n\r\n    }\r\n\r\n\r\n    // Returns the product from the market\r\n    public static Product getProduct(String line) {\r\n        String[] contents = line.split(\",\");\r\n        return new Product(contents[0], contents[1], contents[2],\r\n                Integer.parseInt(contents[3]), Double.parseDouble(contents[4]));\r\n    }\r\n\r\n\r\n\r\n    // Easier implementation to access a txt file\r\n    public static ArrayList<String> getTextInfo(File f) throws IOException {\r\n        ArrayList<String> toReturn = new ArrayList<>();\r\n\r\n        BufferedReader br = new BufferedReader(new FileReader(f));\r\n        String line = br.readLine();\r\n        while (line != null) {\r\n            toReturn.add(line);\r\n            line = br.readLine();\r\n        }\r\n        return toReturn;\r\n\r\n    }\r\n\r\n\r\n    public static User getUser(String info) throws IOException {\r\n        String[] contents = info.split(\";\");\r\n        ArrayList<Product> products = new ArrayList<>();\r\n        String user = \"Customer\";\r\n\r\n        String fileName = contents[0] + \"'s File.txt\";\r\n        ArrayList<String> lines = getTextInfo(new File(fileName));\r\n\r\n        for (String productInfo : lines) {\r\n            if (!productInfo.contains(\"Name:\") && !productInfo.contains(\"User:\") && productInfo.contains(\"User: Seller\")) {\r\n                products.add(getProduct(productInfo));\r\n            } else if (productInfo.contains(\"User: Seller\")) {\r\n                user = \"Seller\";\r\n            }\r\n        }\r\n\r\n\r\n        ShoppingCart shoppingCart = new ShoppingCart(products);\r\n\r\n        if (user.equals(\"Customer\")) {\r\n            return new Customer(contents[2], contents[0], contents[1], shoppingCart.getCartItems());\r\n        } else {\r\n            return new Seller(contents[2], contents[0], contents[1]);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SearchServer.java b/SearchServer.java
--- a/SearchServer.java	(revision f06b1bb090ad8d2ed3111011fa3453e03bb47cd1)
+++ b/SearchServer.java	(date 1669843254659)
@@ -146,7 +146,7 @@
     // Customer Option 1 and Seller Option 1
     private static String viewMarket() {
         String line;
-        String printer = "";
+        StringBuilder printer = new StringBuilder();
         ArrayList<Product> products = new ArrayList<>();
 
         ArrayList<String> storeNames = new ArrayList<>();
@@ -175,11 +175,11 @@
         } catch (IOException e) {
             System.out.println("There are no stores/products found. Sorry");
         }
-        for (int i = 0; i < products.size(); i++) {
-            printer = printer + products.get(i).toString() + ";";
+        for (Product product : products) {
+            printer.append(product.toString()).append(";");
         }
         System.out.println(printer);
-        return printer;
+        return printer.toString();
     }
 
 
